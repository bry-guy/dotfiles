#!/bin/bash

# Log dotfiles setup
mkdir $HOME/log
exec > >(tee -i $HOME/log/dotfiles_install.log)
exec 2>&1

# set -x

## detect OS
[ -f $HOME/.os_detect ] && source $HOME/.os_detect

# Setup home directories mkdir $HOME/.local
mkdir $HOME/.local/lib
mkdir $HOME/.local/bin
mkdir $HOME/.local/src
mkdir $HOME/.local/artifacts

mkdir $HOME/dev

WORKING_DIR=$(pwd)

# Link dotfiles to $HOME
cp -R .git/ $HOME/.git
cp -R .config/ $HOME/.config

ln -f .config/amethyst/* ~/Library/Preferences/

# Update xcode
if [ -n "$OS_MAC" ]; then
		xcode-select --install
fi

# Install Brew

if [ -n "$OS_MAC" ]; then
		if [ -z "$(which brew)" ]; then
				/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		fi
fi

if [ -n "$OS_LINUX" ]; then

		## brew
		if [ -z "$(which brew)" ]; then
				echo "INFO: Install brew."

				/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

				eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

				sudo apt install build-essential
		fi

		## gcc
		if [ -z "$(which gcc)" ]; then
				echo "INFO: Install gcc."

				brew install gcc
		fi
fi

# Update packager

if [ -n "$OS_LINUX" ]; then
		sudo apt update
elif [ -n "$OS_MAC" ]; then
		brew update
fi

# Manual installs

if [ -z "$(which wget)" ]; then
		echo "INFO: Install wget."

		if [ -n "$OS_LINUX" ]; then
				sudo apt install -y wget
		elif [ -n "$OS_MAC" ]; then
				brew install wget
		fi

fi

## neovim
if [ -z "$(which nvim)" ]; then
		echo "INFO: Install neovim."

		if [ -n "$OS_LINUX" ]; then
				cd $HOME/.local/artifacts

				curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
				chmod u+x nvim.appimage
				./nvim.appimage --appimage-extract
				mv squashfs-root $HOME/.local/lib/squashfs-nvim
				ln -sf $HOME/.local/lib/squashfs-nvim/AppRun $HOME/.local/bin/nvim

				### install vim-plug
				sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
						https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

				### install plugins
				nvim --headless +PlugInstall +qa

				cd $WORKING_DIR
		elif [ -n "$OS_MAC" ]; then
				brew install nvim

				### install vim-plug
				sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
						https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

				### install plugins
				nvim --headless +PlugInstall +qa
		fi
fi

## keyd
if [ -z $CODESPACES ] && [ -n "$OS_LINUX" ]; then
		if [ -z "$(which keyd)" ]; then
				echo "INFO: Install keyd."

				cd $HOME/.local/artifacts

				git clone https://github.com/rvaiya/keyd
				cd keyd
				make && sudo make install

				### link config file saved as keyd.conf
				sudo ln -sf .config/keyd/default.conf /etc/keyd/default.conf

				sudo systemctl enable keyd && sudo systemctl start keyd

				cd $WORKING_DIR
		fi
fi

# Install TUI apps

if [ -z "$(which asdf)" ]; then
		echo "INFO: Install asdf."

		git clone https://github.com/asdf-vm/asdf.git ~/.asdf --branch v0.10.0

		source . $HOME/.asdf/asdf.sh
fi

## Install langs

if [ -z "$(asdf plugin list | grep nodejs)" ]; then
		echo "INFO: Add nodejs asdf plugin."
		brew install gpg gawk
		asdf plugin add nodejs https://github.com/asdf-vm/asdf-nodejs.git
fi

if [ -z "$(asdf plugin list | grep golang)" ]; then
		if [ -n "$OS_MAC" ]; then
				echo "INFO: Install coreutils (golang dep)."
				brew install coreutils
		fi

		echo "INFO: Add golang asdf plugin."
		asdf plugin-add golang https://github.com/kennyp/asdf-golang.git

fi

if [ -z "$(asdf plugin list | grep ruby)" ]; then
		if [ -n "$OS_MAC" ]; then
				echo "INFO: Install openssl (ruby dep)."

				brew install openssl@1.1 readline

				echo "INFO: Install ruby-build (ruby dep)."
				brew install ruby-build
				brew upgrade ruby-build

				echo "INFO: Add ruby asdf plugin."
				asdf plugin add ruby https://github.com/asdf-vm/asdf-ruby.git
		fi
fi


echo "INFO: Install languages from asdf .tool-versions."
asdf install

## TODO: python https://github.com/danhper/asdf-python
## TODO: ruby https://github.com/asdf-vm/asdf-ruby
## TODO: java https://github.com/halcyon/asdf-java

brew tap homebrew/cask-fonts

## font-hack-nerd-font 
if [ -z "$(brew list | grep font-hack-nerd-font)" ]; then
		echo "INFO: Install font-hack-nerd-font."

		brew install font-hack-nerd-font
fi

## awscli
if [ -z "$(which aws)" ]; then
		echo "INFO: Install aws."

		if [ -n "$OS_LINUX" ]; then
				sudo apt install -y awscli
		elif [ -n "$OS_MAC" ]; then
				brew install awscli
		fi
fi

## marp-cli
if [ -z "$(which marp)" ]; then
		echo "INFO: Install marp-cli."

		if [ -n "$OS_LINUX" ]; then
				echo "INFO: No installation available from package managers for marp. \
						install via Docker if you want this on Linux."
		elif [ -n "$OS_MAC" ]; then
				brew install marp-cli
		fi
fi

## ripgrep
if [ -z "$(which rg)" ]; then
		echo "INFO: Install rg."

		if [ -n "$OS_LINUX" ]; then
				sudo apt install -y ripgrep
		elif [ -n "$OS_MAC" ]; then
				brew install ripgrep
		fi
fi

## fzf
if [ -z "$(which fzf)" ]; then
		echo "INFO: Install fzf."

		if [ -n "$OS_LINUX" ]; then
				sudo apt install -y fzf
		elif [ -n "$OS_MAC" ]; then
				brew install fzf
		fi
fi

if [ -z $CODESPACES ]; then

		## alacritty
		if [ -z "$(which alacritty)" ]; then
				echo "INFO: Install alacritty."

				if [ -n "$OS_LINUX" ]; then
						sudo apt install -y alacritty
				elif [ -n "$OS_MAC" ]; then
						brew install alacritty
				fi
		fi

		## tmux
		if [ -z "$(which tmux)" ]; then
				echo "INFO: Install tmux."

				if [ -n "$OS_LINUX" ]; then
						sudo apt install -y tmux
				elif [ -n "$OS_MAC" ]; then
						brew install tmux
				fi
		fi

		## imwheel
		if [ -z "$(which imwheel)" ] && [ -n "$OS_LINUX" ]; then
				echo "INFO: Install imwheel."

				sudo apt install -y imwheel
		fi

		## Java
		if [ -z "$(which javac)" ]; then
				echo "INFO: Install javac."

				if [ -n "$OS_LINUX" ]; then
						sudo apt install -y openjdk-11-jdk
						sudo apt install -y openjdk-16-jdk
				elif [ -n "$OS_MAC" ]; then
						brew install openjdk@11
						brew install openjdk
				fi
		fi

		if [ -z "$(which jdtls)" ]; then
				echo "INFO: Install eclipse.jdt.ls."

				wget https://download.eclipse.org/jdtls/milestones/1.9.0/jdt-language-server-1.9.0-202203031534.tar.gz \
						-P $HOME/.local/artifacts

				rm -rf $HOME/.local/lib/jdt-language-server
				mkdir $HOME/.local/lib/jdt-language-server

				tar -xzf $HOME/.local/artifacts/jdt-language-server-1.9.0-202203031534.tar.gz \
						-C $HOME/.local/lib/jdt-language-server

				ln -sf $HOME/.local/lib/jdt-language-server/bin/jdtls $HOME/.local/bin/jdtls
		fi

		if [ -z "$(which gradle)" ]; then
				echo "INFO: Install gradle."

				wget https://services.gradle.org/distributions/gradle-7.4.1-bin.zip -P $HOME/.local/artifacts

				unzip -d $HOME/.local/lib/gradle $HOME/.local/artifacts/gradle-*.zip
		fi

		if [ -z "$(find $HOME/.local/lib/java-debug -type d -name 'com.microsoft.java.debug.core')" ]; then
				echo "INFO: Install java-debug."

				git clone https://github.com/microsoft/java-debug $HOME/.local/src/java-debug

				cd $HOME/.local/src/java-debug
				if [ -n $OS_LINUX ]; then
						JAVA_HOME=$(echo JAVA_11_HOME) ./mvnw clean install
				elif [ -n $OS_MAC ]; then
						JAVA_HOME=$(echo JAVA_11_HOME) ./mvnw clean install
				fi

				mkdir $HOME/.local/lib/java-debug
				mv com.microsoft.java.debug* $HOME/.local/lib/java-debug

				cd $WORKING_DIR
		fi

		if [ -z "$(find $HOME/.local/lib -type d -iname '*vscode-java-test*')" ]; then
				echo "INFO: Install vscode-java-test."

				git clone https://github.com/microsoft/vscode-java-test $HOME/.local/src/vscode-java-test

				cd $HOME/.local/src/vscode-java-test

				npm install
				npm run build-plugin

				mkdir $HOME/.local/lib/vscode-java-test
				cp -r $HOME/.local/src/vscode-java-test/* $HOME/.local/lib/vscode-java-test

				cd $WORKING_DIR
		fi

fi

# Install GUI apps
if [ -z $CODESPACES ]; then

		## flatpak
		if [ -n "$OS_LINUX" ] && [ -z "$(which flatpak)" ]; then
				echo "INFO: Install flatpak."

				sudo apt install -y flatpak
		fi

		## slack
		if [ -z "$(which slack)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Slack)" ]; then
				echo "INFO: Install slack."

				if [ -n "$OS_LINUX" ]; then
						flatpak --user --app slack --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install slack
				fi
		fi

		## 1Password
		if [ -z "$(which 1password)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep 1Password)" ]; then
				echo "INFO: Install 1password."

				if [ -n "$OS_LINUX" ]; then
						curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
						echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' \
								| sudo tee /etc/apt/sources.list.d/1password.list
						sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
						curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
						sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
						curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg

						sudo apt update
						sudo apt install -y 1password
				elif [ -n "$OS_MAC" ]; then
						brew install 1password
				fi
		fi


		## discord
		if [ -z "$(which discord)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Discord)" ]; then
				echo "INFO: Install discord."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app discord --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install discord
				fi
		fi

		## amethyst
		if [ -z "$(which amethyst)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Amethyst)" ]; then
				echo "INFO: Install amethyst."

				if [ -n "$OS_MAC" ]; then
						brew install amethyst
				fi
		fi

		## karabiner-elements
		if [ -z "$(which karabiner-elements)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Karabiner)" ]; then
				echo "INFO: Install karabiner-elements."

				if [ -n "$OS_MAC" ]; then
						brew install karabiner-elements
				fi
		fi


		## lagrange
		if [ -z "$(which lagrange)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Lagrange)" ]; then
				echo "INFO: Install lagrange."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app lagrange --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install lagrange
				fi
		fi

		## obsidian
		if [ -z "$(which obsidian)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Obsidian)" ]; then
				echo "INFO: Install obsidian."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app obsidian --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install obsidian
				fi
		fi

		## signal
		if [ -z "$(which signal)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Signal)" ]; then
				echo "INFO: Install signal."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app signal --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install signal
				fi
		fi

		## spotify
		if [ -z "$(which spotify)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Spotify)" ]; then
				echo "INFO: Install spotify."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app spotify --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install spotify
				fi
		fi

		## todoist
		if [ -z "$(which todoist)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Todoist)" ]; then
				echo "INFO: Install todoist."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app todoist --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install todoist
				fi
		fi

		## zoom
		if [ -z "$(which zoom)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Zoom)" ]; then
				echo "INFO: Install zoom."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app zoom --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install zoom
				fi
		fi

		## dash
		if [ -z "$(which dash)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Dash)" ]; then
				echo "INFO: Install dash."

				if [ -n "$OS_LINUX" ]; then
						flatpak install --user --app dash --assumeyes
				elif [ -n "$OS_MAC" ]; then
						brew install dash
				fi
		fi

		## docker
		if [ -z "$(which docker)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Docker)" ]; then
				echo "INFO: Install docker."

				if [ -n "$OS_LINUX" ]; then
						sudo apt install -y docker
				elif [ -n "$OS_MAC" ]; then
						brew install docker
				fi
		fi

		## chrome
		if [ -z "$(which chrome)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Chrome)" ]; then
				echo "INFO: Install chrome."

				if [ -n "$OS_LINUX" ]; then
						sudo apt install -y chrome
				elif [ -n "$OS_MAC" ]; then
						brew install chrome
				fi
		fi

		# macOS-specific

		## firefox
		if [ -z "$(which firefox)" ] && [ -z "$(mdfind "kMDItemKind == 'Application'" | grep Firefox)" ]; then
				echo "INFO: Install firefox."

				if [ -n "$OS_MAC" ]; then
						brew install firefox
				fi
		fi

fi


# Install Brews

## tldr
if [ -z "$(which tldr)" ]; then
		echo "INFO: Install tldr."

		brew install tldr
fi

# zsh!

## zsh
if [ -z $(which zsh) ]; then

		if [ -n "$OS_LINUX" ]; then
				sudo apt install -y zsh
		elif [ -n "$OS_MAC" ]; then
				brew install zsh
		fi
fi

if [[ $SHELL != *"zsh"* ]]; then
		echo "Changing shell to zsh."
		chsh -s "$(which zsh)"
fi

[ -n "$OS_LINUX" ] && echo "Run eval \$(/home/linuxbrew/.linuxbrew/bin/brew shellenv) to finish installing brew."

