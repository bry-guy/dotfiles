#!/bin/bash

# Log dotfiles setup
mkdir $HOME/log
exec > >(tee -i $HOME/log/dotfiles_install.log)
exec 2>&1

set -x

# Setup home directories
mkdir $HOME/.local
mkdir $HOME/.local/lib
mkdir $HOME/.local/bin
mkdir $HOME/.local/src
mkdir $HOME/.local/artifacts

mkdir $HOME/dev

WORKING_DIR=$(pwd)

sudo apt update

# Link dotfiles to $HOME
cat .gitignore | egrep '^!.*' | egrep -v '\*\*|\.config/.+' | cut -c 2- | xargs -I % cp -R % $HOME
cp -R .git/ $HOME

# Manual installs

## rbenv
if [ -z "$(which rbenv)" ]; then
		echo "INFO: Install rbenv."
		
		cd $HOME/.local/artifacts

		sudo apt install -y rbenv
		mkdir -p "$(rbenv root)"/plugins
		git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)"/plugins/ruby-build
		rbenv install 3.1.0 &>/dev/null &

		cd $WORKING_DIR
fi

## neovim
if [ -z "$(which nvim)" ]; then
		echo "INFO: Install neovim."

		cd $HOME/.local/artifacts

		curl -LO https://github.com/neovim/neovim/releases/latest/download/nvim.appimage
		chmod u+x nvim.appimage
		./nvim.appimage --appimage-extract
		mv squashfs-root $HOME/.local/lib/squashfs-nvim
		ln -s $HOME/.local/lib/squashfs-nvim/AppRun $HOME/.local/bin/nvim

		### install vim-plug
		sh -c 'curl -fLo "${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/autoload/plug.vim --create-dirs \
				https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'

		### install plugins
		nvim --headless +PlugInstall +qa

		cd $WORKING_DIR
fi

## keyd
if [ -z $CODESPACES ]; then
		if [ -z "$(which keyd)" ]; then
				echo "INFO: Install keyd."

				cd $HOME/.local/artifacts

				git clone https://github.com/rvaiya/keyd
				cd keyd
				make && sudo make install

				### link config file saved as keyd.conf
				sudo ln -s .config/keyd/default.conf /etc/keyd/default.conf

				sudo systemctl enable keyd && sudo systemctl start keyd

				cd $WORKING_DIR
		fi
fi

# Install Debs

## ripgrep
if [ -z "$(which rg)" ]; then
		echo "INFO: Install rg."

		sudo apt install -y ripgrep
fi

## fzf
if [ -z "$(which fzf)" ]; then
		echo "INFO: Install fzf."

		sudo apt install -y fzf
fi

## nvm / npm
if [ -z "$(command -v nvm)" ]; then
		echo "INFO: Install nvm."

		curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash
		. ~/.nvm/nvm.sh

		echo "NVM_DIR=$NVM_DIR"
		nvm install --lts
fi

if [ -z $CODESPACES ]; then
		## alacritty
		if [ -z "$(which alacritty)" ]; then
				echo "INFO: Install alacritty."

				sudo apt install -y alacritty
		fi

		## tmux
		if [ -z "$(which tmux)" ]; then
				echo "INFO: Install tmux."

				sudo apt install -y tmux
		fi

		## imwheel
		if [ -z "$(which imwheel)" ]; then
				echo "INFO: Install imwheel."

				sudo apt install -y imwheel
		fi

		## steam
		if [ -z "$(which steam)" ]; then
				echo "INFO: Install steam."

				sudo apt install -y steam
		fi

		## 1Password
		if [ -z "$(which 1password)" ]; then
				echo "INFO: Install 1password."

				 curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg
				 echo 'deb [arch=amd64 signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/amd64 stable main' | sudo tee /etc/apt/sources.list.d/1password.list
				 sudo mkdir -p /etc/debsig/policies/AC2D62742012EA22/
				 curl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | sudo tee /etc/debsig/policies/AC2D62742012EA22/1password.pol
				 sudo mkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22
				 curl -sS https://downloads.1password.com/linux/keys/1password.asc | sudo gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg

				sudo apt update
				sudo apt install -y 1password
		fi

		## Java
		if [ -z "$(which javac)" ]; then
				echo "INFO: Install javac."

				sudo apt install -y openjdk-11-jdk
				sudo apt install -y openjdk-16-jdk
		fi

		if [ -z "$(which java)" ]; then
				echo "INFO: Install java."

				sudo apt install -y openjdk-11-jre
				sudo apt install -y openjdk-16-jre
		fi

		if [ -z "$(which jdtls)" ]; then
				echo "INFO: Install eclipse.jdt.ls."

				wget https://download.eclipse.org/jdtls/milestones/1.9.0/jdt-language-server-1.9.0-202203031534.tar.gz \
						-P $HOME/.local/artifacts

				rm -rf $HOME/.local/lib/jdt-language-server
				mkdir $HOME/.local/lib/jdt-language-server

				tar -xzf $HOME/.local/artifacts/jdt-language-server-1.9.0-202203031534.tar.gz \
						-C $HOME/.local/lib/jdt-language-server

				ln -s $HOME/.local/lib/jdt-language-server/bin/jdtls $HOME/.local/bin/jdtls
		fi

		if [ -z "$(which gradle)" ]; then
				echo "INFO: Install gradle."

				wget https://services.gradle.org/distributions/gradle-7.4.1-bin.zip -P $HOME/.local/artifacts

				unzip -d $HOME/.local/lib/gradle $HOME/.local/artifacts/gradle-*.zip
		fi

		if [ -z "$(find $HOME/.local/lib/java-debug -type d -name 'com.microsoft.java.debug.core')" ]; then
				echo "INFO: Install java-debug."

				git clone https://github.com/microsoft/java-debug $HOME/.local/src/java-debug

				cd $HOME/.local/src/java-debug
				JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64/ ./mvnw clean install

				mkdir $HOME/.local/lib/java-debug
				mv com.microsoft.java.debug* $HOME/.local/lib/java-debug

				cd $WORKING_DIR
		fi

		# TODO: Fix this "check if installed" statement
		if [ -z "$(which vscode-java-test)" ]; then
				echo "INFO: Install vscode-java-test."

				git clone https://github.com/microsoft/vscode-java-test $HOME/.local/src/vscode-java-test

				cd $HOME/.local/src/vscode-java-test

				npm install
				npm run build-plugin

				mkdir $HOME/.local/lib/vscode-java-test
				cp -r $HOME/.local/src/vscode-java-test/* $HOME/.local/lib/vscode-java-test
		fi

fi

# Install Flatpaks
if [ -z $CODESPACES ]; then
		## flatpak
		if [ -z "$(which flatpak)" ]; then
				echo "INFO: Install flatpak."

				sudo apt install -y flatpak
		fi

		## slack
		if [ -z "$(which slack)" ]; then
				echo "INFO: Install slack."

				flatpak --user install -y slack
		fi


		## discord
		if [ -z "$(which discord)" ]; then
				echo "INFO: Install discord."

				flatpak install --user --app discord --assumeyes
		fi

		## lagrange
		if [ -z "$(which lagrange)" ]; then
				echo "INFO: Install lagrange."

				flatpak install --user --app lagrange --assumeyes
		fi

		## obsidian
		if [ -z "$(which obsidian)" ]; then
				echo "INFO: Install obsidian."

				flatpak install --user --app obsidian --assumeyes
		fi

		## signal
		if [ -z "$(which signal)" ]; then
				echo "INFO: Install signal."

				flatpak install --user --app signal --assumeyes
		fi

		## spotify
		if [ -z "$(which spotify)" ]; then
				echo "INFO: Install spotify."

				flatpak install --user --app spotify --assumeyes
		fi

		## todoist
		if [ -z "$(which todoist)" ]; then
				echo "INFO: Install todoist."

				flatpak install --user --app todoist --assumeyes
		fi

		## zoom
		if [ -z "$(which zoom)" ]; then
				echo "INFO: Install zoom."

				flatpak install --user --app zoom --assumeyes
		fi

fi


# Install Brews

## brew
if [ -z "$(which brew)" ]; then
		echo "INFO: Install brew."

		/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

		sudo apt install build-essential
fi

## gcc
if [ -z "$(which gcc)" ]; then
		echo "INFO: Install gcc."

		brew install gcc
fi

## tldr
if [ -z "$(which tldr)" ]; then
		echo "INFO: Install tldr."

		brew install tldr
fi

# zsh!

## zsh
if [ -z $(which zsh) ]; then
		sudo apt install -y zsh
fi

if [[ $SHELL != *"zsh"* ]]; then
		echo "Changing shell to zsh."
		chsh -s "$(which zsh)"
fi

echo "Run eval \$(/home/linuxbrew/.linuxbrew/bin/brew shellenv) to finish installing brew."

