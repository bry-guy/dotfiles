# zmodload zsh/zprof

# ===============================
# Source Architecture-Specific Configurations
# ===============================

if [ -f "$HOME/.zsh_arch" ]; then
    source "$HOME/.zsh_arch"
else
    echo "Warning: ~/.zsh_arch not found. Please run ./script/setup."
fi

# ===============================
# PATH Configurations
# ===============================

export PATH="$HOME/.local/bin:$PATH"
export HOMEBREW_BREWFILE="$HOME/.brewfile"
if [[ -z "$SSH_TTY" && -z "$SSH_AUTH_SOCK" ]]; then
  export SSH_AUTH_SOCK=~/.1password/agent.sock
fi


# ===============================
# Mise En Place
# ===============================

if [ -n "$(command -v mise)" ]; then
		eval "$(mise activate zsh)"
fi

# ===============================
# Golang
# ===============================
if [ -n "$(command -v go)" ]; then
    export GOPATH=$(go env GOPATH)
    export PATH="$GOPATH/bin:$PATH"
fi

# ===============================
# Java
# ===============================


# ===============================
# Antidote Plugin Setup
# ===============================

if [ -n "$(command -v antidote)" ]; then
		antidote load ${ZDOTDIR:-$HOME}/.zsh_plugins.txt
fi

## ==============================
## zsh-fzf-history-search
## ==============================
## Make sure to use double quotes
export ZSH_FZF_HISTORY_SEARCH_EVENT_NUMBERS=0
export ZSH_FZF_HISTORY_SEARCH_DATES_IN_SEARCH=0
export ZSH_FZF_HISTORY_SEARCH_REMOVE_DUPLICATES=1

## ==============================
## ZSH History
## ==============================
HISTFILE=~/.histfile
HISTSIZE=10000
SAVEHIST=10000
setopt SHARE_HISTORY
setopt INC_APPEND_HISTORY  # Write to the history file immediately, not when the shell exits.
setopt HIST_FIND_NO_DUPS  # Do not display duplicates in the history list.
setopt HIST_IGNORE_ALL_DUPS  # Remove old duplicates leaving just the most recent entry in the history.


## History search using text behind cursor
bindkey "^[[A" history-beginning-search-backward
bindkey "^[[B" history-beginning-search-forward

unsetopt beep

# ===============================
# Prompt, Completions, Colors, Etc
# ===============================
# Add your custom completions directory (e.g. containing the official _git) to your fpath
fpath=(~/.zsh $fpath)

# Set compinstall filename and match style
zstyle :compinstall filename "$HOME/.zshrc"
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'

# Load only native zsh completions (no bash completions)
autoload -Uz compinit promptinit colors

# Use a cached dump if available for faster startup
compdump="$HOME/.zcompdump"
if [[ -f "$compdump" && -n "$(find "$compdump" -mtime -7)" ]]; then
    compinit -C
else
    compinit
fi

# Initialize prompt and colors
promptinit
colors

bindkey -v

# ===============================
# Shortcuts
# ===============================
[ -f $HOME/.secrets ] && . $HOME/.secrets
[ -f $HOME/.aliases ] && . $HOME/.aliases
[ -f $HOME/.fns ] && . $HOME/.fns

# ===============================
# Theming
# ===============================
## Prompt customization functions and settings
function git_branch() {
    git symbolic-ref --short HEAD 2> /dev/null
}

function git_repo() {
    git rev-parse --show-toplevel 2>/dev/null | xargs basename
}

function current_process() {
    ps -o comm= -p $$
}

setopt prompt_subst
autoload -Uz add-zsh-hook
function aws_prompt_precmd() {
    if [[ -n $AWS_VAULT ]]; then
        if [[ $AWS_VAULT == *prod* ]]; then
            # Set to bold and red
            PROMPT="%B%F{red}[$AWS_VAULT]%f%b ${vim_mode} "
        else
            # Set to bold and yellow
            PROMPT="%B%F{yellow}[$AWS_VAULT]%f%b ${vim_mode} "
        fi
    else
        PROMPT="${vim_mode} "
    fi
}

add-zsh-hook precmd aws_prompt_precmd

## Title Bar customization based on the terminal type
case ${TERM} in
    alacritty)
        precmd () {
            print -Pn "\e]0;%~\a"
        }
        ;;
    *-256color)
        precmd () {
            print -Pn "\e]0;%~\a"
        }
        ;;
esac

## vim mode indicators
vim_ins_mode="%{$fg[green]%}$%{$reset_color%}"
vim_cmd_mode="%{$fg[magenta]%}$%{$reset_color%}"
vim_mode=$vim_ins_mode

function zle-keymap-select {
    vim_mode="${${KEYMAP/vicmd/${vim_cmd_mode}}/(main|viins)/${vim_ins_mode}}"
    zle reset-prompt
}
zle -N zle-keymap-select

function zle-line-finish {
    vim_mode=$vim_ins_mode
}
zle -N zle-line-finish

# ===============================
# Misc
# ===============================
if [ -n "$(command -v direnv)" ]; then
		eval "$(direnv hook zsh)"
fi

if [ -n "$(command -v op)" ]; then
		eval "$(op completion zsh)"; compdef _op op
fi

if [ -n "$(command -v gh)" ]; then
		export HOMEBREW_GITHUB_API_TOKEN="$(gh auth token)"
fi

if [ -n "$(command -v rg)" ]; then
		export FZF_DEFAULT_COMMAND='rg --files --hidden --smart-case'
fi

# zprof

