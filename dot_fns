opr() {
    local env_file cmd env

    if [[ "$1" == "local-dev" ]]; then
        env_file="./app.local-dev.env"
        shift
		cmd="op run --no-masking --env-file=\"${env_file}\" $@"


    elif [[ "$1" =~ ^(dev|test|sandbox|prod)$ ]]; then
        env="$1"
        shift
        env_file="./app.env"
		cmd="APP_ENV=\"${env}\" op run --no-masking --env-file=\"${env_file}\" $@"

    else
        echo "ERROR: Invalid environment."
        return 1
    fi

    # Run command
	echo "Running command: $cmd"
    eval "$cmd"
}

chat() {
    if [ -z "$1" ]; then
        echo "Usage: chat <extension>"
        return 1
    fi

		(find . -type f -name "*.$1" -exec sh -c 'echo "{}"; cat "{}"' \;; tree) | pbcopy

}

wiki() {
		local dir
		local cmd cmd2

		local file="."

		if [[ "$1" == "as" ]] || [[ "$1" == "work" ]]; then
			file="AgentSync/"
			cmd="+Goyo"
		fi

		if [[ "$1" == "journal" ]] || [[ "$1" == "diary" ]] || [[ "$1" == "today" ]]; then
			dir="Diaries"
			file="$(date -I).md"
			cmd="+Goyo"
			cmd2="+Limelight"

		fi

		if [[ "$1" == "root" ]] || [[ "$1" == "index" ]] || [[ "$1" == "home" ]]; then
			file="index.md"
			cmd="+Goyo"
		fi

		if [[ "$1" == "brag" ]]; then
			file="AgentSync/agentsync-brag.md"
			cmd="+Goyo"
		fi

		cd ~/second-brain/"${dir}"
		nvim "${file}" $cmd $cmd2
}

brew-diff() {
    local temp_brewfile merged_brewfile brewfile_dir
    temp_brewfile=$(mktemp)
    merged_brewfile=$(mktemp)
    brewfile_dir="$HOME"

    echo "üì¢ Generating a temporary Brewfile from the current Homebrew state..."
    brew bundle dump --file="$temp_brewfile" --force | tee /dev/tty
    echo "‚úÖ Temporary Brewfile created: $temp_brewfile"

    echo "üì¢ Merging individual Brewfiles..."
    cat "$brewfile_dir/.brewfile."* | sort -u > "$merged_brewfile.unsorted"

    echo "üì¢ Sorting merged Brewfile for consistency..."
    {
        grep '^tap ' "$merged_brewfile.unsorted" | sort
        grep '^brew ' "$merged_brewfile.unsorted" | sort
        grep '^cask ' "$merged_brewfile.unsorted" | sort
        grep '^vscode ' "$merged_brewfile.unsorted" | sort
    } > "$merged_brewfile"
    
    echo "‚úÖ Sorted and merged Brewfile created: $merged_brewfile"

    diff -U 0 "$merged_brewfile" "$temp_brewfile"

    rm -f "$temp_brewfile" "$merged_brewfile" "$merged_brewfile.unsorted"
}


function devpod_ssh_fix() {
  echo "Looking for a valid SSH auth socket..."
  local original_sock="$SSH_AUTH_SOCK"
  local found=false

  # Find all potential auth-agent directories in /tmp
  for auth_dir in /tmp/auth-agent*; do
    if [ -d "$auth_dir" ]; then
      local socket_path="$auth_dir/listener.sock"
      if [ -S "$socket_path" ]; then
        echo "Testing socket: $socket_path"
        
        # Temporarily set SSH_AUTH_SOCK to the candidate socket
        export SSH_AUTH_SOCK="$socket_path"
        
        # List identities using ssh-add - a valid connection will not error
        if ssh-add -l &>/dev/null; then
          local status=$?
          # 0 = found keys, 1 = no keys but agent works, 2 = agent not running/socket issue
          if [ $status -eq 0 ] || [ $status -eq 1 ]; then
            echo "‚úÖ Found working socket: $socket_path"
            found=true
            break
          fi
        fi
        echo "‚ùå Socket not working: $socket_path"
      fi
    fi
  done

  if [ "$found" = false ]; then
    echo "Could not find a working socket. Restoring original SSH_AUTH_SOCK."
    export SSH_AUTH_SOCK="$original_sock"
    return 1
  fi

  echo "SSH_AUTH_SOCK has been set to: $SSH_AUTH_SOCK"
  return 0
}
